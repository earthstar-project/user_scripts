import * as Earthstar from "https://deno.land/x/earthstar@v10.0.0-alpha.3/mod.ts";
import { parse } from "https://deno.land/std@0.158.0/flags/mod.ts";
import {
  replicaFromArchive,
  replicaToArchive,
} from "../helpers/replica_archive.ts";

const fileExtensionRegex = /^.*\.(\w+)$/;
const endingWithKeypairAddrRegex = /^.*~@\w{4}\.\w{53}$/;

function pathHasFileExtension(path: string): boolean {
  if (path.indexOf(".") === -1) {
    return false;
  }

  // Check that it's in the right position.
  const matches = path.match(fileExtensionRegex);

  if (matches === null) {
    return false;
  }

  const extension = matches[1];

  // Is this part of a keypair address?
  if (extension.length === 53 && path.match(endingWithKeypairAddrRegex)) {
    return false;
  }

  return true;
}

// Parse arguments and validate their presence.
const { share, shareSecret, author, authorSecret, archivePath, docPath } =
  parse(
    Deno.args,
    {
      string: [
        "share",
        "shareSecret",
        "author",
        "authorSecret",
        "archivePath",
        "docPath",
      ],
    },
  );

if (
  !share || !shareSecret || !author || !authorSecret || !archivePath || !docPath
) {
  console.group("You must provide a flag for the following:");

  console.log("--share", `(you provided ${share})`);
  console.log("--shareSecret", `(you provided ${shareSecret})`);
  console.log("--author", `(you provided ${author})`);
  console.log("--authorSecret", `(you provided ${authorSecret})`);
  console.log("--archivePath", `(you provided ${archivePath})`);
  console.log("--docPath", `(you provided ${docPath})`);

  console.groupEnd();
  Deno.exit(1);
}

const tempDirPath = await Deno.makeTempDir();

const replica = await replicaFromArchive({
  shareAddress: share,
  fsDriverPath: tempDirPath,
  archivePath,
  shareSecret,
});

// Get info from stdin

// Check the path.
// If it ends in an extension, pipe in bytes to attachment with auto generated document text (TODO: make this an option)
// If it's not, just read the text and write straight to the doc.

const shouldMakeAttachment = pathHasFileExtension(docPath);

const keypair: Earthstar.AuthorKeypair = {
  address: author,
  secret: authorSecret,
};

if (shouldMakeAttachment) {
  const result = await replica.set(keypair, {
    path: docPath,
    text: "This document was generated by my cool script!",
    attachment: Deno.stdin.readable,
  });

  if (Earthstar.isErr(result)) {
    console.log(result.message);
    Deno.exit(1);
  }

  await replicaToArchive(tempDirPath, archivePath);

  console.log(`Wrote data to ${docPath}`);
  Deno.exit(0);
} else {
  const decoder = new TextDecoder();
  let text = "";

  for await (const textChunk of Deno.stdin.readable) {
    text += decoder.decode(textChunk);
  }

  const result = await replica.set(keypair, {
    path: docPath,
    text,
  });

  if (Earthstar.isErr(result)) {
    console.log(result.message);
    Deno.exit(1);
  }

  await replicaToArchive(tempDirPath, archivePath);

  console.log(`Wrote data to ${docPath}`);
  Deno.exit(0);
}
